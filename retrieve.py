from pyparsing import infixNotation, opAssoc, Word, alphas
import pickle as pkl
import re
import argparse
from collections import defaultdict


#############################################################
########################  Parameters  #######################
#############################################################
parser = argparse.ArgumentParser(description="""PlasRAG is a deep learning-based tool specifically designed for analyzing plasmids, which serves two purposes: (1) plasmid property characterization, and (2) plasmid DNA retrieval. Users can easily input their interested plasmid sequences. Then, PlasRAG can (1) describe the query plasmids with predicted properties and information from relevant literature, (2) retrieve eligible plasmids based on input property queries in Boolean expression form.""")
parser.add_argument('--query', help="query boolean expression combined with property IDs and logical operators ('and', 'or', 'not'), e.g., 'CH1000 and (AM3000 or AM3002 or AM3016)', default: 'CH1000'", type=str, default='CH1000')
parser.add_argument('--midfolder', help='the intermediate folder generated by preprocessing.py, default: ./temp', type=str, default='./temp')
parser.add_argument('--database', help='path of the PlasRAG database folder, default: ./database', type=str, default='./database')
inputs = parser.parse_args()
db_path = inputs.database
out_fn = inputs.midfolder


#############################################################
########################  Help info  ########################
#############################################################
def help_info():
    print('')
    print("""Usage of retrieve.py:
        [--query QUERY] query boolean expression combined with property IDs and logical operators ('and', 'or', 'not'), e.g., 'CH1000 and (AM3000 or AM3002 or AM3016)', default: 'CH1000'
        [--midfolder MIDFOLDER] the intermediate folder generated by preprocessing.py, default: ./temp
        [--database DATABASE] path of the PlasRAG database folder, default: ./database
""")


#############################################################
####################  Check predictions  ####################
#############################################################
id2pro = pkl.load(open(f'{db_path}/id2pro.dict', 'rb'))
res = pkl.load(open(f'{out_fn}/res.dict', 'rb'))
items = defaultdict(set)
for pls in res:
    for domain in res[pls]:
        for i,j in res[pls][domain]:
            items[pls].add(id2pro.inv[i])


#############################################################
#################### Analyze expression  ####################
#############################################################
def evaluate_boolean_expression(expression, item_phrases):
    def replace_phrases(match):
        phrase_id = match.group(0)
        return str(phrase_id in item_phrases)
    
    raw_expression = expression
    expression = re.sub(r'[A-Z]{2}\d{4}', replace_phrases, expression)
    try:
        return eval(expression)
    except Exception as e:
        print(f"Error evaluating expression: {raw_expression}")
        return False

def find_matching_items(boolean_expression, items):
    matching_items = []
    for item_id, item_phrases in items.items():
        if evaluate_boolean_expression(boolean_expression, item_phrases):
            matching_items.append(item_id)
    return matching_items

query = inputs.query
result = find_matching_items(query, items)
result = ', '.join(result)
print(f"The eligible plasmids aligning with the query expression '{query}' are {result}.")
